{"file":"MainNavigation-DW17bEHy.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,UAAM,UAAU,IAAI,CAAA,CAAE;AAGS,IAAA,CAAA,QAAA,SAAA,IAAAA,iBAAA,MAAM;AAAA,MAAa;AAAA,MAAW,MAC3D,aAAa,GAAG,EACb,KAAK,EAAE,kBAAkB,IAAI,EAC7B,KAAK;AAAA,IACV,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":["_withAsyncContext"],"sources":["../../../../components/global/navs/MainNavigation.vue"],"sourcesContent":["<template>\n  <div>\n    <div v-for=\"(posts, folderName) in folders\" :key=\"folderName\" class=\"\">\n      <ul>\n        <li v-for=\"post in posts\" :key=\"post.slug\" class=\"pb-1 md:pb-2 lg:pb-3\">\n          <NuxtLink\n            :to=\"post._path\"\n            class=\"navText text-2xl lg:text-5xl xl:text-5xl\"\n          >\n            {{ post.title }}\n          </NuxtLink>\n        </li>\n      </ul>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, onMounted } from \"vue\";\nimport { useAsyncData } from \"#app\";\nimport menus from \"../../../public/_data/menus.json\"; // Import menus.json\n\n// Define a ref for storing grouped and sorted folders\nconst folders = ref({});\n\n// Use the constant path in queryContent\nconst { data: foldersPosts } = await useAsyncData(\"folders\", () =>\n  queryContent(\"/\")\n    .sort({ numbernavigation: -1 }) // Sorting in descending order (highest first)\n    .find()\n);\n\nonMounted(() => {\n  // Filter out the 'tags' folder and posts where 'numbernavigation' is 0\n  let filteredPosts = (foldersPosts.value || []).filter(\n    (post) => post._dir !== \"tags\" && post.numbernavigation !== 0\n  );\n\n  // Apply filtering based on menus.json and the 'collections' folder condition\n  filteredPosts = filteredPosts.filter((post) => {\n    const folderName = post._dir;\n\n    // Remove all files from 'collections' if 'excludefromnavigation' equals 2\n    if (\n      folderName === \"collections\" &&\n      menus.submenu[\"excludefromnavigation\"] === 2\n    ) {\n      console.log(\n        `Excluding folder: ${folderName} because 'excludefromnavigation' is set to 2`\n      );\n      return false; // Exclude 'collections' folder\n    }\n\n    // Other condition for excluding submenu\n    if (menus.submenu[\"excludefromnavigation\"] === 2) {\n      return false; // Exclude based on the position value\n    }\n\n    return true; // Include other folders\n  });\n\n  // Group posts by folder name (_dir)\n  const grouped = filteredPosts.reduce((acc, post) => {\n    const folderName = post._dir; // Folder name is stored in _dir\n    if (!acc[folderName]) {\n      acc[folderName] = [];\n    }\n    acc[folderName].push(post);\n    return acc;\n  }, {});\n\n  // Sort posts within each folder by 'numbernavigation' in descending order\n  for (const folder in grouped) {\n    grouped[folder].sort((a, b) => b.numbernavigation - a.numbernavigation);\n  }\n\n  // Assign the grouped and sorted posts to the folders ref\n  folders.value = grouped;\n});\n</script>\n"],"version":3}