{"version":3,"file":"dash-Du9Rc2YW.js","sources":["../../../../components/Charts/AllbooksTagChart.vue","../../../../components/Charts/AllbooksArticlesTagTable.vue"],"sourcesContent":["<template>\n  <div class=\"mb-10\">\n    <p class=\"text-xl font-bold mt-10 pb-5\">Categories on items:</p>\n    <ClientOnly>\n    <!-- El-Select to select a folder or \"All\" -->\n    <el-select v-model=\"selectedFolder\" @change=\"updateTagCounts\" placeholder=\"Select a folder\" class=\"w-full pr-5\">\n      <el-option\n        v-for=\"folder in folders\"\n        :key=\"folder.name\"\n        :label=\"folder.displayName\"\n        :value=\"folder.name\"\n        class=\"pr-5\">\n      </el-option>\n    </el-select>\n\n    <!-- Container with blend mode -->\n    <div class=\"multiply-blend\">\n      <Pie \n        v-if=\"chartData.labels.length\" \n        :data=\"chartData\"\n        class=\"m-2 mt-5 p-20\"\n        :options=\"{\n          plugins: {\n            legend: {\n              display: false, // Hide the legend\n            },\n            tooltip: {\n              callbacks: {\n                label: function(context) {\n                  const tagName = context.label || 'Unknown';\n                  const tagCount = context.raw || 0;\n                  return `${tagName}: appears in ${tagCount} articles`;\n                },\n              },\n            },\n          },\n        }\" \n      />\n    </div>\n  </ClientOnly>\n  </div>\n</template>\n\n\n<script setup lang=\"ts\">\nimport { ref, onMounted } from 'vue';\nimport { Pie } from 'vue-chartjs';\nimport {\n  Chart as ChartJS,\n  Title,\n  Tooltip,\n  Legend,\n  ArcElement,\n} from 'chart.js';\n\n// Register Chart.js components required for a pie chart\nChartJS.register(Title, Tooltip, Legend, ArcElement);\n\nconst folders = ref<{ name: string; displayName: string }[]>([]); // Array to store folder names and display names (first article title)\nconst selectedFolder = ref<string>('All'); // Store the currently selected folder, defaulting to \"All\"\nconst tagCounts = ref<{ [tag: string]: number }>({}); // Object to store tag counts for the selected folder or all folders\nconst chartData = ref<{ labels: string[], datasets: any[] }>({\n  labels: [],\n  datasets: [],\n});\n\nonMounted(async () => {\n  try {\n    // Fetch all folders in the content/folders directory\n    const fetchedFolders = await queryContent('/')\n      .only('_dir')  // Only get directories\n      .find();\n\n    // Filter out the 'tags' folder from the result\n    const filteredFolders = fetchedFolders.filter(folder => folder._dir !== 'tags');\n    // console.log(filteredFolders);\n\n    // Create an array of folder names and their corresponding first article titles\n    const folderDisplayNames = await Promise.all(filteredFolders.map(async (folder) => {\n      const folderName = folder._dir;\n      const files = await queryContent(`/folders/${folderName}`).find();\n\n      // Determine the display name: the title of the first article, or fallback to folder name\n      const displayName = files.length > 0 && files[0].title\n        ? files[0].title\n        : folderName;\n\n      return { name: folderName, displayName };\n    }));\n\n\n    // Filter out folders with empty or \"Unknown\" labels\n    let uniqueFolderDisplayNames = folderDisplayNames\n      .filter(folder => folder.displayName && folder.displayName !== 'Unknown');\n\n    // Remove duplicates based on display name\n    uniqueFolderDisplayNames = uniqueFolderDisplayNames.filter((value, index, self) =>\n      index === self.findIndex((t) => (\n        t.displayName === value.displayName\n      ))\n    );\n\n    // Add the \"All\" option\n    folders.value = [{ name: 'All', displayName: 'All Items' }, ...uniqueFolderDisplayNames];\n\n    // Load tag counts for all articles initially\n    await updateTagCounts();\n  } catch (error) {\n    console.error('Error loading folders:', error);\n  }\n});\n\n// Function to update tag counts based on the selected folder or all folders\nconst updateTagCounts = async () => {\n  try {\n    const newTagCounts: { [tag: string]: number } = {};\n\n    if (selectedFolder.value === 'All') {\n      // Fetch and count tags across all folders in the content/folders directory\n      const allFiles = await queryContent('/').find();\n      allFiles.forEach(file => {\n        if (file.tags && Array.isArray(file.tags)) {\n          file.tags.forEach(tag => {\n            if (tag in newTagCounts) {\n              newTagCounts[tag]++;\n            } else {\n              newTagCounts[tag] = 1;\n            }\n          });\n        }\n      });\n    } else {\n      // Fetch and count tags in the selected folder\n      const files = await queryContent(`/folders/${selectedFolder.value}`).find();\n      files.forEach(file => {\n        if (file.tags && Array.isArray(file.tags)) {\n          file.tags.forEach(tag => {\n            if (tag in newTagCounts) {\n              newTagCounts[tag]++;\n            } else {\n              newTagCounts[tag] = 1;\n            }\n          });\n        }\n      });\n    }\n\n    // Update tagCounts and chartData\n    tagCounts.value = newTagCounts;\n    chartData.value = {\n      labels: Object.keys(tagCounts.value),\n      datasets: [\n        {\n          label: 'Tag Usage',\n          backgroundColor: [\n            'rgba(224, 224, 224, 0.9)', // Light Grey with Transparency\n            'rgba(192, 192, 192, 0.9)', // Silver with Transparency\n            'rgba(160, 160, 160, 0.9)', // Grey with Transparency\n            'rgba(128, 128, 128, 0.9)', // Dim Grey with Transparency\n            'rgba(96, 96, 96, 0.9)',    // Dark Grey with Transparency\n            'rgba(64, 64, 64, 0.9)',    // Dark Slate Grey with Transparency\n            'rgba(32, 32, 32, 0.9)',    // Black with Transparency\n          ],\n          data: Object.values(tagCounts.value),\n          borderWidth: 0,\n        },\n      ],\n    };\n  } catch (error) {\n    console.error('Error updating tag counts:', error);\n  }\n};\n</script>\n\n\n\n<style>\n.multiply-blend {\n  mix-blend-mode: screen; /* Alternative blend mode */\n  filter: brightness(.6) contrast(3) ;/* Adjusted filter for a distinct effect */\n}\n\n.multiply-blend {\n  display: flex; /* Enable Flexbox layout */\n  justify-content: center; /* Horizontally center */\n  align-items: center; /* Vertically center */\n  width: 100%; /* Ensure it takes the full width of its container */\n  height: auto; /* Adjust height to content */\n}\n\n.light-mode el-option {\n  background-color: #e2e3e5;\n  color: #161717;\n}\n\n.dark-mode body {\n  background-color: #161715;\n  color: #ebf4f1;\n}\n\n</style>\n","<template>\n  <div class=\"overflow-x-auto mb-10\">\n    <p class=\"text-xl font-bold opacity-90 pb-5\">Items, categories and tags</p>\n    <table class=\"min-w-full divide-y divide-gray-300 table-transparent\">\n      <thead class=\"mb-20 opacity-40\">\n        <tr>\n          <th class=\"py-2 text-left text-xs font-medium\">Type</th>\n          <th class=\"py-2 text-left text-xs font-medium\">Nr of items</th>\n          <th class=\"py-2 text-left text-xs font-medium\">Nr of tags</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr v-for=\"folder in folderDetails\" :key=\"folder.title\">\n          <td class=\"py-2 whitespace-nowrap text-sm font-medium \">\n            <router-link :to=\"folder.link\">{{ folder.title }}</router-link>\n          </td>\n          <td class=\"py-2 whitespace-nowrap text-sm \">{{ folder.articleCount }}</td>\n          <td class=\"py-2 whitespace-nowrap text-sm \">{{ folder.uniqueTagsCount }}</td>\n        </tr>\n        <tr class=\"opacity-40\">\n          <td class=\"py-2 whitespace-nowrap text-sm font-bold \">Total</td>\n          <td class=\"py-2 whitespace-nowrap text-sm font-bold\">{{ totalArticleCount }}</td>\n          <td class=\"py-2 whitespace-nowrap text-sm font-bold\">{{ totalUniqueTagsCount }}</td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, onMounted } from 'vue';\n\ninterface FolderDetails {\n  title: string;        // Directory name as title\n  articleCount: number; // Number of articles in the folder\n  uniqueTagsCount: number; // Number of unique tags in the folder\n  link: string;         // Link to the folder or first article\n}\n\n// Reactive references to store folder details and totals\nconst folderDetails = ref<FolderDetails[]>([]);\nconst totalArticleCount = ref(0);\nconst totalUniqueTagsCount = ref(0);\n\nonMounted(async () => {\n  try {\n    // Fetch all folder names from the content/folders directory\n    const folderData = await queryContent('/')\n      .only('_dir')  // Only get directories\n      .find();\n\n    // Filter out the 'tags' folder from the result\n    const filteredFolders = folderData.filter(folder => folder._dir !== 'tags');\n    // console.log(filteredFolders);\n\n    // Extract unique folder names\n    const folderNames = [...new Set(filteredFolders.map(folder => folder._dir).filter(Boolean))];\n\n    // Initialize an array to store folder details\n    const details: FolderDetails[] = [];\n    let totalArticles = 0;\n    let totalTags = new Set<string>();\n\n    // Process each folder name\n    for (const folderName of folderNames) {\n      // Fetch all articles in the current folder, excluding index.md\n      const articles = await queryContent(`/${folderName}`).where({ _file: { $ne: 'index.md' } }).find();\n      // console.log( articles)\n\n      // Use the folder name as the title\n      const folderTitle = folderName || 'Untitled Folder';\n      \n      // Create a link to the folder or the first article\n      const firstArticleLink = articles.length > 0 ? `${articles[0]._path}` : '#';\n\n      // Count the number of articles in the current folder\n      const articleCount = articles.length;\n\n      // Count unique tags\n      const uniqueTags = new Set<string>();\n      articles.forEach(article => {\n        if (article.tags && Array.isArray(article.tags)) {\n          article.tags.forEach(tag => {\n            uniqueTags.add(tag);\n            totalTags.add(tag); // Add to global unique tag set\n          });\n        }\n      });\n\n      // Only include folders with valid articles\n      if (articleCount > 0) {\n        details.push({\n          title: folderTitle, // Set the title as the folder name\n          articleCount: articleCount,\n          uniqueTagsCount: uniqueTags.size,\n          link: firstArticleLink,\n        });\n      }\n\n      // Accumulate totals\n      totalArticles += articleCount;\n    }\n\n    // Update the reactive references\n    folderDetails.value = details;\n    totalArticleCount.value = totalArticles;\n    totalUniqueTagsCount.value = totalTags.size;\n\n    // console.log(folderData)\n    // console.log(folderNames)\n\n  } catch (error) {\n    console.error('Error loading folders or counting articles and tags:', error);\n    // Handle error as needed\n  }\n});\n</script>\n"],"names":["ChartJS"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwDAA,UAAA,SAAA,OAAA,SAAA,QAAA,UAAA;AAEA,QAAA,CAAA,CAAA;AACA,QAAA,KAAA;AACA,QAAA,CAAA,CAAA;AACA,QAAA;AAAA,MAA6D,QAAA,CAAA;AAAA,MAClD,UAAA,CAAA;AAAA,IACE,CAAA;;;;;;;;;;;;;;;;;;;ACvBP,UAAA,gBAAgB,IAAqB,CAAA,CAAE;AACvC,UAAA,oBAAoB,IAAI,CAAC;AACzB,UAAA,uBAAuB,IAAI,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}