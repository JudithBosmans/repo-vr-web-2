{"file":"ImageGallery-BLCLNLJB.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiFA,QAAA,CAAA,CAAA;AAGA,UAAA,QAAA,SAAA;AACA,UAAA,aAAA,MAAA,KAAA,QAAA,OAAA,EAAA;AAGA,IAAuB,CAAA,QAAA,SAAA,IAAAA,iBAAA,MAAA,aAAA,QAAA,MAAA,aAAA,UAAA,EAAA,QAAA,CAAA,CAAA;AAGvB,QAAA,KAAA;AACA,QAAA,EAAA;;;;;;;;;;;;;","names":["_withAsyncContext"],"sources":["../../../../components/global/ImageGallery.vue"],"sourcesContent":["<template>\n  <ClientOnly>\n    <div class=\"container\">\n      <div v-if=\"post.folder !== 'page'\">\n        <FolderContent v-if=\"post.folder\" :title=\"post.title\" />\n      </div>\n\n      <!-- Carousel -->\n      <div v-if=\"post.imagegallery.carouselgrid == 'carousel'\">\n        <p v-if=\"post.imagegallery.gallerytitle\" class=\"text-xl font-bold pb-2\">\n          {{ post.imagegallery.gallerytitle }}\n        </p>\n        <p v-if=\"post.imagegallery.gallerytext\" class=\"pb-2\">{{ post.imagegallery.gallerytext }}</p>\n\n        <el-carousel indicator-position=\"none\" motion-blur>\n          <el-carousel-item v-for=\"(item, index) in post.imagegallery.galleryImages\" :key=\"index\">\n            <div class=\"relative h-full flex items-center justify-center\">\n              <!-- Show loader until the image is fully loaded -->\n              <div v-if=\"imageLoading[index]\" class=\"absolute inset-0 flex items-center justify-center bg-gray-200\">\n                <p>Loading image...</p>\n              </div>\n              <NuxtImg\n                :src=\"item\"\n                alt=\"Gallery Image\"\n                loading=\"lazy\"\n                @load=\"imageLoaded(index)\"\n                @click=\"openFullscreen(item)\"\n                class=\"w-full h-auto max-h-full object-contain\"\n              />\n            </div>\n          </el-carousel-item>\n        </el-carousel>\n      </div>\n\n      <!-- Grid -->\n      <div v-if=\"post.imagegallery.carouselgrid == 'grid'\">\n        <p v-if=\"post.imagegallery.gallerytitle\" class=\"text-xl font-bold pb-2\">\n          {{ post.imagegallery.gallerytitle }}\n        </p>\n        <p v-if=\"post.imagegallery.gallerytext\" class=\"pb-2\">{{ post.imagegallery.gallerytext }}</p>\n\n        <!-- Masonry -->\n        <div class=\"masonry\">\n          <div class=\"masonry-item\" v-for=\"(item, index) in post.imagegallery.galleryImages\" :key=\"index\">\n            <div class=\"relative masonry-image\">\n              <!-- Show loader until the image is fully loaded -->\n              <div v-if=\"imageLoading[index]\" class=\"absolute inset-0 flex items-center justify-center bg-gray-200\">\n                <p>Loading image...</p>\n              </div>\n              <NuxtImg\n                :src=\"item\"\n                alt=\"Gallery Image\"\n                loading=\"lazy\"\n                @click=\"openFullscreen(item)\"\n                @load=\"imageLoaded(index)\"\n                class=\"cursor-pointer w-full object-cover rounded-md\"\n              />\n            </div>\n          </div>\n        </div>\n\n        <!-- Fullscreen Overlay -->\n        <div v-if=\"isOverlayVisible\" class=\"fullscreen-overlay\" @click=\"closeFullscreen\">\n          <NuxtImg :src=\"currentImage\" alt=\"Fullscreen Image\" class=\"fullscreen-image\" />\n          <button @click=\"closeFullscreen\" class=\"close-button\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\">\n              <path fill=\"currentColor\" d=\"m6.4 18.308l-.708-.708l5.6-5.6l-5.6-5.6l.708-.708l5.6 5.6l5.6-5.6l.708.708l-5.6 5.6l5.6 5.6l-.708.708l-5.6-5.6z\"></path>\n            </svg>\n          </button>\n        </div>\n      </div>\n    </div>\n  </ClientOnly>\n</template>\n\n\n<script setup>\nimport { ref, onMounted } from 'vue';\nimport { useRoute, useAsyncData } from '#app';\n\n// Define reactive properties for managing image loading state\nconst imageLoading = ref([]);\n\n// Get the current route\nconst route = useRoute();\nconst actualPath = route.path.replace(/\\/$/, '');\n\n// Fetch post data\nconst { data: post } = await useAsyncData('post', () => queryContent(actualPath).findOne());\n\n// State for managing the fullscreen overlay\nconst isOverlayVisible = ref(false);\nconst currentImage = ref('');\n\n// Function to open the fullscreen overlay\nconst openFullscreen = (image) => {\n  currentImage.value = image;\n  isOverlayVisible.value = true;\n};\n\n// Function to close the fullscreen overlay\nconst closeFullscreen = () => {\n  isOverlayVisible.value = false;\n  currentImage.value = '';\n};\n\n// Function to handle image loading\nconst imageLoaded = (index) => {\n  imageLoading.value[index] = false;\n};\n\n// Initialize the loading state for images\nonMounted(() => {\n  if (post.value && post.value.imagegallery && post.value.imagegallery.galleryImages) {\n    imageLoading.value = post.value.imagegallery.galleryImages.map(() => true);\n  }\n});\n</script>\n"],"version":3}